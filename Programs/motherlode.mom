PROGRAM_START
    BRB1 GAME_BOOT //Start game at button press
    NOP
    JMP PROGRAM_START
    NOP

GAME_BOOT
    MOV R0 10 //Set player default coordinates
    MOV R1 8
    STR R0 0 //X
    STR R1 1 //Y

    MOV R1 0 //X-index
TOP_ROW_LOOP
    MOV RF 0
    STRVR RF R1
    MOV RF 1
    ADD R1 R1 RF
    MOV RF 20
    CMP R1 RF
    BRZ TOP_ROW_DONE
    NOP
    JMP TOP_ROW_LOOP
    NOP
TOP_ROW_DONE
    MOV RF 1 //Number 0 tile
    MOV R1 x0013 // left on top row
    STRVR RF R1 //Score 0
    MOV R1 x0012 
    STRVR RF R1 //Score 0
    MOV R1 x0011 
    STRVR RF R1 //Score 0
    MOV R1 x0010 
    STRVR RF R1 //Score 0
    
    MOV RF x15 //Peng symbol
    MOV R1 x000F //Where money symbol should be
    STRVR RF R1 //Put money symbol
    
    MOV RF x14	//Drill symbol
    MOV R1 xC  	//screen addres for symbol
    STRVR RF R1	//Put drill icon
    
    MOV RF x2	//1 symbol
    MOV R1 xD  	//screen addres for symbol
    STRVR RF R1	//Put 1 icon

    MOV RF x19 //Fuel lvl
    STRV RF x0000
    
    MOV RF x2 //1 symbol
    STRV RF x0001

    MOV RF x1A //Current fuel symbol
    STRV RF x0003

    MOV RF x1 //Fuel number
    STRV RF x0004
    STRV RF x0005
    STRV RF x0007
    MOV RF x6
    STRV RF x0006
    
INIT_ROOM_LOOP //R4: screen X, R5: Screen Y,R6: current room start  address 
    MOV	R4 0
    MOV R5 0
    JMP INNER_LOOP
    NOP

Y_SCREEN
    MOV R4 0 //sets x to 0
    MOV RF 1 
    ADD R5 R5 RF //y++
    MOV RF 8 
    CMP R5 RF	//all rooms generated check
    BRZ LOAD_VM
    NOP
    JMP INNER_LOOP
    NOP

X_SCREEN
    MOV RF 1
    ADD R4 R4 RF //x++
    MOV RF 8
    CMP R4 RF //all rooms in row generated check
    BRZ Y_SCREEN
    NOP
    JMP INNER_LOOP
    NOP

INNER_LOOP
    MOV R6 1000 //START VALUE IS 1000 IN MEM
    MOV RF 2240 //NEXT 5 LINES CALCULATES START ADDRESS OF CURRENT ROOM
    MUL RF R5 RF
    ADD R6 R6 RF
    MOV RF 280
    MUL RF R4 RF
    ADD R6 R6 RF //R6 is now correct address
    
    MOV R0 0 //Row
    MOV R1 0 //Col
    MOV RE x00FF //For masking
VMEM_FILL_LOOP
    LFSR R2 //Move random number to R2
    AND R2 R2 RE //Only keep one byte of R2
    MOV RF 125 //Start comparing for which tile to place
    CMP R2 RF
    BRN VMEM_FILL_STONE
    NOP
    MOV RF 163 //These numbers are carefully choosen
    CMP R2 RF
    BRN VMEM_FILL_SILVER
    NOP
    MOV RF 189
    CMP R2 RF
    BRN VMEM_FILL_GOLD
    NOP
    MOV RF 202
    CMP R2 RF
    BRN VMEM_FILL_RUBY
    NOP
    MOV R3 x0F //Stone Tile address
    JMP VMEM_FILL_END_LOOP
    NOP

VMEM_FILL_STONE
    MOV R3 x10 //Tile address
    JMP VMEM_FILL_END_LOOP
    NOP
VMEM_FILL_SILVER
    MOV R3 x11 //Tile address
    JMP VMEM_FILL_END_LOOP
    NOP
VMEM_FILL_GOLD
    MOV R3 x12 //Tile address
    JMP VMEM_FILL_END_LOOP
    NOP
VMEM_FILL_RUBY
    MOV R3 x13 //Tile address
    JMP VMEM_FILL_END_LOOP
    NOP

VMEM_FILL_END_LOOP
    MOV RF 20
    MUL R7 RF R0  //20*y
    ADD R7 R7 R6  //START ADDRESS + 20y
    ADD R7 R1 R7  //START AFFRESS + 20y + x, R7 now contains current address for tile
    
    STRR R3 R7 //WRITE TO VMEM FROM DMEM
    
    MOV RD 1
    ADD R1 R1 RD
    MOV RD 20
    CMP R1 RD //Check if col has reached 20
    BRZ VMEM_FILL_RST_X
    NOP
    JMP VMEM_FILL_LOOP
    NOP
VMEM_FILL_RST_X
    MOV R1 0 //Reset col
    MOV RD 1
    ADD R0 RD R0 //add one to row
    MOV RD 14
    CMP R0 RD //Check if row is 14
    BRZ X_SCREEN
    NOP
    JMP VMEM_FILL_LOOP
    NOP


LOAD_VM
    MOV RF 4
    STR RF 10  //ROOM X = 4
    STR RF 11  //ROOM Y = 4
    
    MOV R2 11080 // START ADDRESS FOR ROOM AT 4,4
   
    MOV R0 1 //y
    MOV R1 0 //x
    
VMEM_MOVE_LOOP
    LDAR R3 R2 //Load tile to R3

    MOV RF 8
    LSL R4 R0 RF
    ADD R4 R4 R1 //Index for vmem in R4
    STRVR R3 R4 //Write tile to vmem
    
    MOV RF 1
    ADD R1 R1 RF //x++
    ADD R2 R2 RF //D-mem adress ++
    MOV RF 20
    CMP R1 RF //Check if x==20
    BRZ VMEM_MOVE_RST_X
    NOP
    JMP VMEM_MOVE_LOOP
    NOP

VMEM_MOVE_RST_X
    MOV RF 11360 //End of screen in Dmem
    CMP R2 RF
    BRZ PLACE_PLAYER //Done with moving data to dmem
    NOP
    MOV RF 1
    ADD R0 R0 RF //y++
    MOV R1 0 //x = 0
    JMP VMEM_MOVE_LOOP
    NOP

PLACE_PLAYER
    JMP BUILD_SHOP
SHOP_BUILT
    MOV R0 x0D //Player down tile
    STRV R0 x070A
    MOV R0 x7
    STR R0 1 // y-pos
    MOV R0 xA
    STR R0 0 //x-pos
    MOV R0 1
    STR R0 3 //Drill level
    MOV R0 0
    STR R0 4 //Score
    MOV R0 100 
    STR R0 5 //Fuel
    MOV R0 1
    STR R0 6 //Fuel lvl
    JMP MAIN_LOOP
    NOP

BUILD_SHOP
    MOV R0 x1B	//VERTICAL WALL
    STRV R0 x0405 //LEFT WALL
    STRV R0 x0505
    STRV R0 x0605
    STRV R0 x0705
    STRV R0 x0805
    STRV R0 x040D //RIGHT WALL
    STRV R0 x050D
    STRV R0 x060D
    STRV R0 x070D
    STRV R0 x080D
    MOV R0 x1C	//BOTTOM WALL
    STRV R0 x0406
    STRV R0 x0407
    STRV R0 x0408
    STRV R0 x0409
    STRV R0 x040A
    STRV R0 x040B
    STRV R0 x040C
    STRV R0 x0A06
    STRV R0 x0A07
    STRV R0 x0A0B
    STRV R0 x0A0C
    MOV R0 x1D	//BOTTOM RIGHT EDGE
    STRV R0 x0A08
    STRV R0 x0A0D
    MOV R0 x1E //BOTTOM LEFT EDGE
    STRV R0 x0A05
    STRV R0 x0A0A
    MOV R0 x1F //TOP WALL 
    STRV R0 x0306
    STRV R0 x0307
    STRV R0 x0308
    STRV R0 x0309
    STRV R0 x030A
    STRV R0 x030B
    STRV R0 x030C
    STRV R0 x0906
    STRV R0 x0907
    STRV R0 x090B
    STRV R0 x090C
    MOV R0 x20 //WALL TOP RIGHT EDGE
    STRV R0 x0908
    MOV R0 x21 //WALL TOP LEFT EDGE
    STRV R0 x090A
    MOV R0 x22 //CORNER WALL BOTTOM LEFT
    STRV R0 x0905
    MOV R0 x23 //CORNER WALL BOTTOM RIGHT
    STRV R0 x090D
    MOV R0 x24 //CORNER WALL TOP LEFT
    STRV R0 x0305
    MOV R0 x25 //CORNER WALL TOP RIGHT
    STRV R0 x030D
    MOV R0 x0F //STANDARD GROUND INSIDE AND AROUND ENTRANCE
    STRV R0 x0507
    STRV R0 x0508
    STRV R0 x0509
    STRV R0 x050A
    STRV R0 x050B
    STRV R0 x0607
    STRV R0 x0608
    STRV R0 x060A
    STRV R0 x060B
    STRV R0 x0707
    STRV R0 x0708
    STRV R0 x0709
    STRV R0 x070A
    STRV R0 x070B
    STRV R0 x0807
    STRV R0 x0808
    STRV R0 x0809
    STRV R0 x080A
    STRV R0 x080B
    STRV R0 x0909
    STRV R0 x0C08
    STRV R0 x0A09
    STRV R0 x0C0A
    STRV R0 x0C09
    STRV R0 x0B08
    STRV R0 x0B09
    STRV R0 x0B0A

    STRV R0 x0608
    STRV R0 x060A

    STRV R0 x0506
    STRV R0 x0606
    STRV R0 x0706
    STRV R0 x0806

    STRV R0 x050C
    STRV R0 x060C
    STRV R0 x070C
    STRV R0 x080C

    MOV R0 x16
    STRV R0 x0607	
    MOV R0 x17
    STRV R0 x0609
    MOV R0 x18
    STRV R0 x060B
    JMP SHOP_BUILT
    NOP

MAIN_LOOP
    MOV RF 0
    BRJU JOY_UP
    NOP
    STR RF 102
    BRJD JOY_DOWN
    NOP
    STR RF 103
    BRJR JOY_RIGHT
    NOP
    STR RF 105
    BRJL JOY_LEFT
    NOP
    STR RF 104
    BRB1 JOY_BTN1
    NOP
    STR RF 106
    BRB2 GAME_BOOT
    NOP
    JMP MAIN_LOOP //Restart loop
    NOP

JOY_UP
    MOV RF 1 
    LDA R0 102
    CMP RF R0
    BRZ MAIN_LOOP
    NOP
    STR RF 102

    MOV R0 3
    MOV R4 0
    MOV R5 -1
    JMP MOVE
    NOP
JOY_DOWN
    MOV RF 1
    LDA R0 103
    CMP RF R0
    BRZ MAIN_LOOP
    NOP
    STR RF 103

    MOV R0 2
    MOV R4 0
    MOV R5 1
    JMP MOVE
    NOP
JOY_RIGHT
    MOV RF 1
    LDA R0 105
    CMP RF R0
    BRZ MAIN_LOOP
    NOP
    STR RF 105

    MOV R0 1
    MOV R4 1
    MOV R5 0
    JMP MOVE
    NOP
JOY_LEFT
    MOV RF 1
    LDA R0 104
    CMP RF R0
    BRZ MAIN_LOOP
    NOP
    STR RF 104

    MOV R0 0
    MOV R4 -1
    MOV R5 0
    JMP MOVE
    NOP

JOY_BTN1
    MOV RF 1 
    LDA R0 106
    CMP RF R0
    BRZ MAIN_LOOP
    NOP
    STR RF 106
     
    LDA R0 0	//Player X
    LDA R1 1	//Player Y
    
    MOV RF 1	//Check if tile above player is buyable tile
    SUB R1 R1 RF
    
    MOV RF 8
    LSL R1 R1 RF
    ADD R3 R1 R0	//vMem adress for tile above player in R3
    LDAVR R5 R3
    
    MOV RF x16		//Drill up icon
    CMP RF R5
    BRZ TRY_BUY_DRILL
    NOP    

    MOV RF x17		//Refill fuel icon
    CMP RF R5
    BRZ TRY_REFILL_FUEL
    NOP    

    MOV RF x18		//Upgrade fuel icon
    CMP RF R5
    BRZ TRY_UPGRADE_FUEL
    NOP    

    JMP MAIN_LOOP
    NOP

TRY_BUY_DRILL
    LDA R2 3 //Check if drill level is maxed
    MOV RF 4
    CMP RF R2
    BRZ MAIN_LOOP
    NOP

    LDA R0 4	//Player score
    LDA R1 3	//Drill level
    
    MOV R2 10
    MUL R3 R1 R2
    CMP R0 R3
    BRN MAIN_LOOP
    NOP
    MOV R4 1
    ADD R1 R1 R4
    SUB R0 R0 R3
    STR R0 4
    STR R1 3
    JMP UPDATE_SCORE
    NOP

TRY_UPGRADE_FUEL
    LDA R2 6 //Check if fuel level is maxed
    MOV RF 9
    CMP RF R2
    BRZ MAIN_LOOP
    NOP

    LDA R0 4	//Player score
    LDA R1 6	//Drill level
    
    MOV R2 10
    MUL R3 R1 R2
    CMP R0 R3
    BRN MAIN_LOOP
    NOP
    MOV R4 1
    ADD R1 R1 R4
    SUB R0 R0 R3
    STR R0 4
    STR R1 6

    MOV RF 100 //Fuel per lvl
    MUL RF RF R1 //Max fuel level in RF
    STR RF 5    

    JMP UPDATE_SCORE
    NOP


TRY_REFILL_FUEL
    LDA R0 4
    MOV RF 5 //Cost of refill
    SUB R0 R0 RF
    BRN MAIN_LOOP //Not enough peng
    NOP

    STR R0 4 //Refill Fuel
    MOV RF 100 //Fuel per lvl
    LDA R1 6
    MUL RF RF R1 //Max fuel level in RF
    STR RF 5
    JMP UPDATE_SCORE
    NOP

MOVE //R4 should contain delta-x, R5 should contain delta-y, R0 should contain direction
    STR R0 2
    LDA R1 0 //X pos
    LDA R2 1 //Y pos
    LDA R6 3 //Drill level

    ADD R7 R1 R4 //New x-pos
    ADD R8 R2 R5 //New y-pos

    LDA RE 5 //CHECK IF OUT OF FUEL
    MOV RF 0
    CMP RE RF
    BRZ TURN
    NOP

    MOV RE 20 //Check if too far right
    CMP RE R7
    BRZ NEXT_SCREEN
    NOP
    MOV RE -1 //Check too far left
    CMP RE R7
    BRZ NEXT_SCREEN
    NOP
    MOV RE 0 //Check too far up
    CMP RE R8
    BRZ NEXT_SCREEN
    NOP
    MOV RE 15 //Check too far down
    CMP RE R8
    BRZ NEXT_SCREEN
    NOP
    JMP NO_BORDER_WRAP
    NOP


NO_BORDER_WRAP
    MOV RF 8 //No out of bounds, check if can drill/move
    LSL RB R8 RF //Shift new y
    ADD RB RB R7 //Vmem new pos in RB

    LDAVR R9 RB //Tile where player tries to move in R9
    MOV RF x0F
    SUB R9 R9 RF

    MOV RF x2C
    CMP RF R9
    BRN	AWARD_SCORE
    NOP  

    LDA RA 3 //Drill level in RA
    CMP RA R9
    BRN TURN
    NOP

    JMP CRACK
    NOP
CONT_MOVE
    MOV RF 8
    LSL R3 R2 RF //Shift old y
    ADD R3 R3 R1 //Vmem old pos in R3
    MOV RF x0F
    STRVR RF R3 //Write over old tile

    STR R7 0
    STR R8 1

    MOV RF x0B //Start for player sprites
    ADD RF R0 RF

    STRVR RF RB //Write over new tile

    JMP UPDATE_SCORE
    NOP

TURN //R0 - direction, R1 - x-pos, R2 - y-pos
    LDA R1 0 //X pos
    LDA R2 1 //Y pos
    MOV RF 8
    LSL R3 R2 RF //Shift up y
    ADD R3 R3 R1 //Vmem pos in R3
    MOV RF x0B //Start for player tiles
    ADD RF R0 RF
    STRVR RF R3 //Write over new tile
    JMP UPDATE_SCORE
    NOP

CRACK //R9 = Drill level needed to break rock, RB = VMEM new pos
    MOV RF 0
    CMP RF R9
    BRZ AWARD_SCORE //branch if ground
    NOP
      
    MOV RF 1 //Sub 1 from Fuel
    LDA RA 5
    SUB RA RA RF
    STR RA 5

    MOV RF x3B //cracked rocks are 3B addresses after uncracked rocks
    ADD RF RF R9
    STRVR RF RB // Write over tile
    JMP TURN
    NOP

AWARD_SCORE // R9 = (GroundTile - x0F), DONT FUCK UP REGs FROM MOVE!!!
    MOV RF 1 //Sub 1 from Fuel
    LDA RA 5
    SUB RA RA RF
    STR RA 5

    MOV RF 0
    CMP R9 RF //Check if ground
    BRZ CONT_MOVE
    NOP 
    BEEP //Make sound
    
    MOV RF x2D
    SUB R9 R9 RF
    LDA RF 4 //Load score to RF
    MOV RE 1
    LSL RE RE R9
    ADD RF RF RE //New score in RF
    STR RF 4
    JMP CONT_MOVE
    NOP
    
UPDATE_SCORE
    MOV RA 0
    LDA R0 4 //Score to R0
    JMP GET_BCD
    NOP
LOAD_FUEL_BCD
    MOV RA 1
    LDA R0 5
    JMP GET_BCD
    NOP
BCD_RETURN
    MOV RF 1
    ADD R3 R3 RF //Add one to get to correct number tile
    ADD R4 R4 RF
    ADD R5 R5 RF
    ADD R6 R6 RF

    MOV RF 0
    CMP RA RF
    BRZ WRITE_SCORE
    NOP

    JMP WRITE_FUEL
    NOP    
CONT_GUI_UPDATE
    LDA RF 3 // LOAD DRILL LVL
    MOV RE 1
    ADD RF RF RE //RF IS NOW TILE ADDERSS
    STRV RF xD // Put drill lvl on D tile

    LDA RF 6 //FUEL LVL
    MOV RE 1
    ADD RF RF RE
    STRV RF x1 //Put drill level on tile 1

    JMP MAIN_LOOP
    NOP

WRITE_SCORE
    STRV R3 X10
    STRV R4 X11
    STRV R5 X12
    STRV R6 X13
    JMP LOAD_FUEL_BCD
    NOP
WRITE_FUEL	
    STRV R3 X4
    STRV R4 X5
    STRV R5 X6
    STRV R6 X7
    JMP CONT_GUI_UPDATE 
    NOP

GET_BCD //Number to BCD should be in R0, returns BCD digits in R3,R4,R5,R6
    MOV R3 0 //Dest for 1000
    MOV R4 0 //Dest for 100
    MOV R5 0 //Dest for 10
    MOV R6 0 //Dest for 1
    MOV RF 1
THOUSAND
    MOV R1 0 //Loop counter
    MOV R2 1000
THOUSAND_LOOP
    CMP R0 R2
    BRN HUNDRED
    NOP
    SUB R0 R0 R2
    ADD R1 R1 RF
    JMP THOUSAND_LOOP
    NOP
HUNDRED
    ADD R3 R3 R1
    MOV R1 0 //Loop counter
    MOV R2 100
HUNDRED_LOOP
    CMP R0 R2
    BRN TEN
    NOP
    SUB R0 R0 R2
    ADD R1 R1 RF
    JMP HUNDRED_LOOP
    NOP
TEN
    ADD R4 R4 R1
    MOV R1 0 //Loop counter
    MOV R2 10
TEN_LOOP
    CMP R0 R2
    BRN ONE
    NOP
    SUB R0 R0 R2
    ADD R1 R1 RF
    JMP TEN_LOOP
    NOP
ONE
    ADD R5 R5 R1
    ADD R6 R6 R0
    JMP BCD_RETURN
    NOP 
    

NEXT_SCREEN //R4 is delta X, R5 is delta Y  (R2 = Y POS, R1 = X POS FROM EARLIER)
    LDA RE 10 //old x
    ADD RE RE R4
    MOV RF x0007
    AND RE RE RF //mod 8
    STR RE 12 //Store new x

    LDA RE 11 //old y
    ADD RE RE R5
    MOV RF x0007
    AND RE RE RF
    STR RE 13 //Store new y

    MOV RE 0
    CMP R4 RE
    BRZ Y_BORDER_WRAP //No X-movement
    NOP
    BRN X_WRAP_LEFT // delta X < 0
    NOP
    JMP X_WRAP_RIGHT // delta X > 0
    NOP

Y_BORDER_WRAP
    CMP R5 RE
    BRZ NO_BORDER_WRAP //No Y-movement
    NOP
    BRN Y_WRAP_UP  // delta Y < 0
    NOP
    JMP Y_WRAP_DOWN // delta Y > 0
    NOP

X_WRAP_LEFT
    MOV RA 1000		// Calculate what tile is where we try to move on new screen all according to formula
    LDA RE 12  		 // X coord for room
    LDA RD 13 		 // Y coord for room
    MOV RC 8
    MUL RD RD RC 	 // Y * 8 
    ADD RE RE RD 	 // X + Y*8
    MOV RC 280
    MUL RE RE RC 	 // 280(X + Y*8)
    ADD RA RA RE 	 // 1000 + 280(X + Y *8) , start adress for tiles in new room
    MOV RE 0
    ADD R9 RA RE	//SAVE STARTADRESS FOR NEW ROOM FOR LATER

    MOV RE 20		 //Calculate tile adress in room according to formula of tile we want to move to
    MOV RD 1		 //Top row is not in the dMem, need to adjust for that
    SUB RD R2 RD
    MUL RE RE RD         //20*Y
    MOV RD 19 	       	 //When wrapping left, new X is 19
    ADD RE RE RD         //20*Y + X
    ADD RB RA RE       	 //Room_adress + 20*Y + X = Tile_adress

    LDAR RA RB		 //New tile in RF
    LDA RE 3  		 //Drill level
    MOV RD x0F		 //Start adress for breakable rocks
    ADD RE RE RD	 //Highest tile that can be broken
    CMP RE RA 		 //Can i breakz?
    BRN TURN 		 //NO BREAK ROCK CANCEL
    NOP
    MOV R5 19		//UPDATE PLAYER X, Y IS SAME
    MOV R6 0
    ADD R6 R6 R2
    	
    JMP CHANGE_SCREEN
    NOP

CHANGE_SCREEN //RA is tile that was broken, RD is start adress for breakable blocks, R1 is OLD player X, R2 is OLD player Y, R5 is new player X, R6 is new player Y, R9 is start adress for new room tiles indMem
    MOV RE 0 //Before that calculate the new score	
    SUB RA RA RD
    CMP RA RE //Check if ground
    BRZ CONT_CHANGE_SCREEN
    NOP
    BEEP //Make sound
    MOV RE 1
    SUB RA RA RE
    LDA RD 4 //Load score to RD
    LSL RE RE RA
    ADD RD RD RE //New score in RD
    STR RD 4  

CONT_CHANGE_SCREEN //Here we want to store the current room to data memory, and load the new room to video memory
    MOV RE 8
    LSL R2 R2 RE
    ADD R2 R2 R1 //CURRENT ADRESS FOR PLAYER IN VMEM
    MOV RD x0F
    STRVR RD R2 //OVERWRITE PLAYAH WITH GROUND BEFORE STORING/LOADING FROM MEMORY

    STR R5 0 	//Store new player X
    STR R6 1	//Store new player Y
    
    LDA R4 11	//Current room Y
    LDA R3 10	//Current room X
    MUL R4 R4 RE	  //Calc start adress for current room in dMem
    ADD R4 R4 R3
    MOV R3 280
    MUL R4 R4 R3
    MOV R3 1000
    ADD R4 R4 R3 //It is in R4

    
    MOV RC 8	//For shifting 8 bits
    MOV RA 0	   //Loop X
    MOV RE 0	   //Loop Y
    MOV RD 1	   //For inc/dec 1

CHANGE_SCREEN_LOOP //Needs RA for loop X, RE for loop Y, R4 for start adress old room, R9 start adress new room, RD is inc/dec 1 register, RC is 8 for shifting to adress vMem
    MOV R0 20
    MUL R1 RE R0
    ADD R1 R1 RA	//OFFSETT FOR CURRENT TILE IN THE ROOM IN R1
    ADD R3 R1 R4	//ADRESS TO STORE TILE X Y IN DMEM IN R3

    ADD R2 RE RD
    LSL R2 R2 RC
    ADD R2 RA R2	//ADRESS TO CURRENT TILE IN VMEM IN R2
    LDAVR R5 R2		//Current tile in R5
    STRR R5 R3		//STR CURRENT TILE IN dMEM

    ADD RF R9 R1 	//RF adress of tile to load from new room
    LDAR R5 RF		//R5 IS TILE THAT IS NEWLY LOADED
    STRVR R5 R2
    MOV R0 19
    CMP RA R0
    BRN SCREEN_INC_X
    NOP
    MOV RA 0 //x is 19
    MOV R0 13
    CMP RE R0
    BRZ SCREEN_PLACE_PLAYER //All rows are changed
    NOP
    ADD RE RE RD
    JMP CHANGE_SCREEN_LOOP
    NOP
SCREEN_INC_X
    ADD RA RA RD
    JMP CHANGE_SCREEN_LOOP
    NOP

SCREEN_PLACE_PLAYER
    LDA R0 0	//PLAYER X
    LDA R1 1	//PLAYER Y
    MOV R2 8
    LSL R1 R1 R2
    ADD R1 R1 R0
    LDA R3 2	//PLAYER DIRECTION
    MOV R4 x0B
    ADD R3 R3 R4
    STRVR R3 R1

    LDA RE 12 //Copy over new screen x and y
    STR RE 10
    LDA RE 13
    STR RE 11

    MOV RF 1 //Sub 1 from Fuel
    LDA RA 5
    SUB RA RA RF
    STR RA 5

    JMP UPDATE_SCORE
    NOP   
	

X_WRAP_RIGHT
    MOV RA 1000		// Calculate what tile is where we try to move on new screen all according to formula
    LDA RE 12  		 // X coord for room
    LDA RD 13 		 // Y coord for room
    MOV RC 8
    MUL RD RD RC 	 // Y * 8 
    ADD RE RE RD 	 // X + Y*8
    MOV RC 280
    MUL RE RE RC 	 // 280(X + Y*8)
    ADD RA RA RE 	 // 1000 + 280(X + Y *8) , start adress forTiles in new room
    MOV RE 0
    ADD R9 RA RE	//SAVE STARTADRESS FOR NEW ROOM FOR LATER

    MOV RE 20		 //Calculate tile adress in room according to formula of tile we want to move to
    MOV RD 1		 //Top row is not in the dMem, need to adjust for that
    SUB RD R2 RD
    MUL RE RE RD         //20*Y
    MOV RD 0 	       	 //When wrapping RIGHT, new X is 19
    ADD RE RE RD         //20*Y + X
    ADD RB RA RE       	 //Room_adress + 20*Y + X = Tile_adress

    LDAR RA RB		 //New tile in RA
    LDA RE 3  		 //Drill level
    MOV RD x0F		 //Start adress for breakable rocks
    ADD RE RE RD	 //Highest tile that can be broken
    CMP RE RA 		 //Can i breakz?
    BRN TURN 		 //NO BREAK ROCK CANCEL
    NOP
    MOV R5 0		//UPDATE PLAYER X, Y IS SAME
    MOV R6 0
    ADD R6 R6 R2
    JMP CHANGE_SCREEN
    NOP

Y_WRAP_UP
    MOV RA 1000		// Calculate what tile is where we try to move on new screen all according to formula
    LDA RE 12  		 // X coord for room
    LDA RD 13 		 // Y coord for room
    MOV RC 8
    MUL RD RD RC 	 // Y * 8 
    ADD RE RE RD 	 // X + Y*8
    MOV RC 280
    MUL RE RE RC 	 // 280(X + Y*8)
    ADD RA RA RE 	 // 1000 + 280(X + Y *8) , start adress for tiles in new room
    MOV RE 0
    ADD R9 RA RE	//SAVE STARTADRESS FOR NEW ROOM FOR LATER

    MOV RE 260		 //Calculate tile adress in room according to formula of tile we want to move to when wrapping up new Y is 13 and 20 * Y is 260

    ADD RE RE R1         //20*Y + X
    ADD RB RA RE       	 //Room_adress + 20*Y + X = Tile_adress

    LDAR RA RB		 //New tile in RA
    LDA RE 3  		 //Drill level
    MOV RD x0F		 //Start adress for breakable rocks
    ADD RE RE RD	 //Highest tile that can be broken
    CMP RE RA 		 //Can i breakz?
    BRN TURN 		 //NO BREAK ROCK CANCEL
    NOP
    MOV R6 14		//UPDATE PLAYER Y, X IS SAME
    MOV R5 0
    ADD R5 R5 R1
    JMP CHANGE_SCREEN
    NOP

Y_WRAP_DOWN
    MOV RA 1000		// Calculate what tile is where we try to move on new screen all according to formula
    LDA RE 12  		 // X coord for room
    LDA RD 13 		 // Y coord for room
    MOV RC 8
    MUL RD RD RC 	 // Y * 8 
    ADD RE RE RD 	 // X + Y*8
    MOV RC 280
    MUL RE RE RC 	 // 280(X + Y*8)
    ADD RA RA RE 	 // 1000 + 280(X + Y *8) , start adress for tiles in new room
    MOV RE 0
    ADD R9 RA RE	//SAVE STARTADRESS FOR NEW ROOM FOR LATER

    MOV RE 0 	       	 //When wrapping DOWN, new Y is 0 and 20*Y = 0	 //Calculate tile adress in room according to formula of tile we want to move to

    ADD RE RE R1         //20*Y + X
    ADD RB RA RE       	 //Room_adress + 20*Y + X = Tile_adress

    LDAR RA RB		 //New tile in RA
    LDA RE 3  		 //Drill level
    MOV RD x0F		 //Start adress for breakable rocks
    ADD RE RE RD	 //Highest tile that can be broken
    CMP RE RA 		 //Can i breakz?
    BRN TURN 		 //NO BREAK ROCK CANCEL
    NOP
    MOV R6 1		//UPDATE PLAYER Y, X IS SAME
    MOV R5 0
    ADD R5 R5 R1
    JMP CHANGE_SCREEN
    NOP
